// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Join extends ethereum.Event {
  get params(): Join__Params {
    return new Join__Params(this);
  }
}

export class Join__Params {
  _event: Join;

  constructor(event: Join) {
    this._event = event;
  }

  get _game(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _by(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Move extends ethereum.Event {
  get params(): Move__Params {
    return new Move__Params(this);
  }
}

export class Move__Params {
  _event: Move;

  constructor(event: Move) {
    this._event = event;
  }

  get _game(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get x(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get _by(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class NewGame extends ethereum.Event {
  get params(): NewGame__Params {
    return new NewGame__Params(this);
  }
}

export class NewGame__Params {
  _event: NewGame;

  constructor(event: NewGame) {
    this._event = event;
  }

  get _game(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _by(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Start extends ethereum.Event {
  get params(): Start__Params {
    return new Start__Params(this);
  }
}

export class Start__Params {
  _event: Start;

  constructor(event: Start) {
    this._event = event;
  }

  get _game(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _by(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Win extends ethereum.Event {
  get params(): Win__Params {
    return new Win__Params(this);
  }
}

export class Win__Params {
  _event: Win;

  constructor(event: Win) {
    this._event = event;
  }

  get _game(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get _winner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _by(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Contract__stateResult {
  value0: Array<Address>;
  value1: Array<i32>;
  value2: i32;
  value3: Address;

  constructor(
    value0: Array<Address>,
    value1: Array<i32>,
    value2: i32,
    value3: Address
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromI32Array(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    return map;
  }

  getPlayers(): Array<Address> {
    return this.value0;
  }

  getBoard(): Array<i32> {
    return this.value1;
  }

  getNonce(): i32 {
    return this.value2;
  }

  getWinner(): Address {
    return this.value3;
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  gameID(): BigInt {
    let result = super.call("gameID", "gameID():(uint256)", []);

    return result[0].toBigInt();
  }

  try_gameID(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gameID", "gameID():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  state(_game: BigInt): Contract__stateResult {
    let result = super.call(
      "state",
      "state(uint256):(address[2],uint8[14],uint8,address)",
      [ethereum.Value.fromUnsignedBigInt(_game)]
    );

    return new Contract__stateResult(
      result[0].toAddressArray(),
      result[1].toI32Array(),
      result[2].toI32(),
      result[3].toAddress()
    );
  }

  try_state(_game: BigInt): ethereum.CallResult<Contract__stateResult> {
    let result = super.tryCall(
      "state",
      "state(uint256):(address[2],uint8[14],uint8,address)",
      [ethereum.Value.fromUnsignedBigInt(_game)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__stateResult(
        value[0].toAddressArray(),
        value[1].toI32Array(),
        value[2].toI32(),
        value[3].toAddress()
      )
    );
  }
}

export class JoinCall extends ethereum.Call {
  get inputs(): JoinCall__Inputs {
    return new JoinCall__Inputs(this);
  }

  get outputs(): JoinCall__Outputs {
    return new JoinCall__Outputs(this);
  }
}

export class JoinCall__Inputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }

  get _game(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class JoinCall__Outputs {
  _call: JoinCall;

  constructor(call: JoinCall) {
    this._call = call;
  }
}

export class MoveCall extends ethereum.Call {
  get inputs(): MoveCall__Inputs {
    return new MoveCall__Inputs(this);
  }

  get outputs(): MoveCall__Outputs {
    return new MoveCall__Outputs(this);
  }
}

export class MoveCall__Inputs {
  _call: MoveCall;

  constructor(call: MoveCall) {
    this._call = call;
  }

  get _game(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get x(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class MoveCall__Outputs {
  _call: MoveCall;

  constructor(call: MoveCall) {
    this._call = call;
  }
}

export class NewGameCall extends ethereum.Call {
  get inputs(): NewGameCall__Inputs {
    return new NewGameCall__Inputs(this);
  }

  get outputs(): NewGameCall__Outputs {
    return new NewGameCall__Outputs(this);
  }
}

export class NewGameCall__Inputs {
  _call: NewGameCall;

  constructor(call: NewGameCall) {
    this._call = call;
  }
}

export class NewGameCall__Outputs {
  _call: NewGameCall;

  constructor(call: NewGameCall) {
    this._call = call;
  }
}
